name: Release CLI and Packages on Tag

permissions:
  contents: read

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      # Checkout the repo and setup the tooling for this job
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0

      - name: Setup golang
        uses: ./.github/actions/golang

      - name: Install tools
        uses: ./.github/actions/install-tools

      - name: Build CLI
        run: |
          make build-cli-linux-amd
          make build-cli-linux-arm

      - name: "Jackal Agent: Login to GHCR"
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ghcr.io
          username: dummy
          password: ${{ github.token }}

      - name: "Jackal Agent: Build and Publish the Image"
        run: |
          cp build/jackal build/jackal-linux-amd64
          cp build/jackal-arm build/jackal-linux-arm64
          docker buildx build --push --platform linux/arm64/v8,linux/amd64 --tag ghcr.io/racer159/jackal/agent:$GITHUB_REF_NAME .
          rm build/jackal-linux-amd64
          rm build/jackal-linux-arm64
          echo JACKAL_AGENT_IMAGE_DIGEST=$(docker buildx imagetools inspect ghcr.io/racer159/jackal/agent:$GITHUB_REF_NAME --format '{{ json . }}' | jq -r .manifest.digest) >> $GITHUB_ENV

      # Builds init packages since GoReleaser won't handle this for us
      - name: Build init-packages For Release
        run: |
          make release-init-package ARCH=amd64 AGENT_IMAGE_TAG=$GITHUB_REF_NAME
          make release-init-package ARCH=arm64 AGENT_IMAGE_TAG=$GITHUB_REF_NAME

      - name: Publish Init Package as OCI and Skeleton
        run: |
          make publish-init-package ARCH=amd64 REPOSITORY_URL=ghcr.io/racer159/packages
          make publish-init-package ARCH=arm64 REPOSITORY_URL=ghcr.io/racer159/packages

      # Create a CVE report based on this build
      - name: Create release time CVE report
        run: "make cve-report"

      # Upload the contents of the build directory for later stages to use
      - name: Upload build artifacts
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        with:
          name: build-artifacts
          path: build/
          retention-days: 1

  push:
    runs-on: ubuntu-latest
    needs: build
    environment: release
    permissions:
      contents: write
    steps:
      # Checkout the repo and setup the tooling for this job
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0

      - name: Setup golang
        uses: ./.github/actions/golang

      - name: Install tools
        uses: ./.github/actions/install-tools

      - name: Download build artifacts
        uses: actions/download-artifact@eaceaf801fd36c7dee90939fad912460b18a1ffe # v4.1.2
        with:
          name: build-artifacts
          path: build/

      - name: Make Jackal executable
        run: |
          chmod +x build/jackal

      # Before we run the release we need to aggressively cleanup files to reduce disk pressure
      - name: Cleanup files
        uses: ./.github/actions/cleanup-files

      - name: Setup release ENV vars
        run: |
          K8S_MODULES_VER=$(go list -f '{{.Version}}' -m k8s.io/client-go | sed 's/v//; s/\./ /g')
          echo K8S_MODULES_MAJOR_VER=$(expr $(echo "$K8S_MODULES_VER" | cut -d " " -f 1) + 1) >> $GITHUB_ENV
          echo K8S_MODULES_MINOR_VER=$(echo "$K8S_MODULES_VER" | cut -d " " -f 2) >> $GITHUB_ENV
          echo K8S_MODULES_PATCH_VER=$(echo "$K8S_MODULES_VER" | cut -d " " -f 3) >> $GITHUB_ENV

          echo K9S_VERSION=$(go list -f '{{.Version}}' -m github.com/derailed/k9s) >> $GITHUB_ENV
          echo CRANE_VERSION=$(go list -f '{{.Version}}' -m github.com/google/go-containerregistry) >> $GITHUB_ENV
          echo SYFT_VERSION=$(go list -f '{{.Version}}' -m github.com/anchore/syft) >> $GITHUB_ENV
          echo ARCHIVER_VERSION=$(go list -f '{{.Version}}' -m github.com/mholt/archiver/v3) >> $GITHUB_ENV
          echo HELM_VERSION=$(go list -f '{{.Version}}' -m helm.sh/helm/v3) >> $GITHUB_ENV

      # Create the GitHub release notes, upload artifact backups to S3, publish homebrew recipe
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@7ec5c2b0c6cdda6e8bbb49444bc797dd33d74dd8 # v5.0.0
        with:
          distribution: goreleaser
          version: latest
          args: release --rm-dist --debug
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN}}

      - name: Save CVE report
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3 # v4.3.1
        with:
          name: cve-report
          path: build/jackal-known-cves.csv
